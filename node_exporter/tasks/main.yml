---
# install node_exporter 

- name: Ensure node_exporter group exists
  group:
    name: "{{ node_exporter_default_group_name }}"
    gid: "{{ node_exporter_default_group_id }}"
    state: present

- name: Ensure node_exporter user exists
  user:
    name: "{{ node_exporter_default_user_name }}"
    uid: "{{ node_exporter_default_user_id }}"
    state: present
    group: "{{ node_exporter_default_group_name }}"
    append: true
    create_home: false

- name: Add management users to node_exporter group
  user:
    name: "{{ item.name }}"
    groups:
    - "{{ node_exporter_default_group_name }}"
    append: true
  with_items: "{{ users }}"

- name: Create install directory
  file:
    path: "{{ node_exporter_install_dir }}"
    state: directory
    mode: '0770'
    owner: "{{ node_exporter_default_user_name }}"
    group: "{{ node_exporter_default_group_name }}"

- name: Check installed version of node_exporter
  command: "{{ node_exporter_install_dir }}/node_exporter --version"
  register: node_exporter_installed_version
  failed_when: false
  changed_when: false

- name: Download node_exporter
  get_url:
    url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-{{ node_exporter_arch }}.tar.gz"
    dest: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ node_exporter_arch }}.tar.gz"
    checksum: "sha256:{{ node_exporter_checksum }}"
    force: true
    mode: 0644
  when: node_exporter_installed_version.stdout is not defined or not node_exporter_installed_version.stdout is search(node_exporter_version)

- name: Unarchive node_exporter binary
  unarchive:
    src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ node_exporter_arch }}.tar.gz"
    remote_src: yes
    dest: "/tmp"
    creates: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ node_exporter_arch }}/node_exporter"
  check_mode: false
  when: node_exporter_installed_version.stdout is not defined or not node_exporter_installed_version.stdout is search(node_exporter_version)

- name: Move node_exporter binary
  copy:
    src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ node_exporter_arch }}/node_exporter"
    remote_src: yes
    dest: "{{ node_exporter_install_dir }}/node_exporter"
    mode: 0755
    owner: "{{ node_exporter_default_user_name }}"
    group: "{{ node_exporter_default_group_name }}"
  notify: Restart node_exporter
  when: node_exporter_installed_version.stdout is not defined or not node_exporter_installed_version.stdout is search(node_exporter_version)

- name: Delete tmp files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
  - "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ node_exporter_arch }}"
  - "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ node_exporter_arch }}.tar.gz"
  when: node_exporter_installed_version.stdout is not defined or not node_exporter_installed_version.stdout is search(node_exporter_version)

- name: Copy systemd unit file
  template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    mode: '755'
    owner: "root"
    group: "root"
  notify: Restart node_exporter

- name: Copy traefik config
  template:
    src: traefik_node_exporter.yaml.j2
    dest: "/mnt/{{ hostname }}-volume/traefik/config/file-provider/node-exporter.yaml"
    mode: '755'
    owner: "{{ node_exporter_default_user_name }}"
    group: "{{ node_exporter_default_group_name }}"

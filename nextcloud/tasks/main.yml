---
# install nextcloud 

- name: Ensure nextcloud group exists
  group:
    name: "{{ nextcloud_default_group_name }}"
    gid: "{{ nextcloud_default_group_id }}"
    state: present

- name: Ensure nextcloud user exists
  user:
    name: "{{ nextcloud_default_user_name }}"
    uid: "{{ nextcloud_default_user_id }}"
    state: present
    group: "{{ nextcloud_default_group_name }}"
    append: true
    create_home: false

- name: Add management users to nextcloud group
  user:
    name: "{{ item.name }}"
    groups:
    - "{{ nextcloud_default_group_name }}"
    append: true
  with_items: "{{ users }}"

- name: Create install directory
  file:
    path: "{{ nextcloud_install_dir }}"
    state: directory
    mode: '0770'
    owner: "{{ nextcloud_default_user_name }}"
    group: "{{ nextcloud_default_group_name }}"

- name: Create tmp directory
  file:
    path: "/mnt/nextcloud-tmp"
    state: directory
    mode: '0770'
    owner: "www-data"
    group: "{{ nextcloud_default_group_name }}"

- name: Create postgres directories
  file:
    path: "/mnt/{{ hostname }}-volume/nextcloud/db/var/lib/postgresql/data"
    state: directory
    mode: '770' # rwx rwx ---
    owner: "{{ nextcloud_default_user_name }}"
    group: "{{ nextcloud_default_group_name }}"

- name: Copy app env file
  template:
    src: app.env.j2
    dest: "{{ nextcloud_install_dir }}/app.env"
    mode: '660' # rw- rw- ---
    owner: "{{ nextcloud_default_user_name }}"
    group: "{{ nextcloud_default_group_name }}"
  notify: Restart docker-compose

- name: Copy db env file
  template:
    src: db.env.j2
    dest: "{{ nextcloud_install_dir }}/db.env"
    mode: '660' # rw- rw- ---
    owner: "{{ nextcloud_default_user_name }}"
    group: "{{ nextcloud_default_group_name }}"
  notify: Restart docker-compose

- name: Copy wal-g env file
  template:
    src: wal-g.env.j2
    dest: "{{ nextcloud_install_dir }}/wal-g.env"
    mode: '660' # rw- rw- ---
    owner: "{{ nextcloud_default_user_name }}"
    group: "{{ nextcloud_default_group_name }}"
  notify: Restart docker-compose

- name: Copy docker-compose file
  template:
    src: docker-compose.yaml.j2
    dest: "{{ nextcloud_install_dir }}/docker-compose.yaml"
    mode: '660' # rw- rw- ---
    owner: "{{ nextcloud_default_user_name }}"
    group: "{{ nextcloud_default_group_name }}"
  notify: Restart docker-compose

- name: Start docker-compose
  docker_compose:
    project_src: "{{ nextcloud_install_dir }}"
    pull: yes
    state: present

- name: Get docker-compose path
  command: which docker-compose 
  register: docker_compose_path
  changed_when: false

- name: Ensure postgres full backup scripts is run by cron
  cron:
    name: "nextcloud postgres full backup"
    minute: "0"
    hour: "3"
    # redirecting stdout/stderr both before and after -- allows to catch errors
    # in docker-compose command itself and erros in its execution
    job: >
      cd {{ nextcloud_install_dir }} &&
      {{ docker_compose_path.stdout }} exec -T
      -e PGUSER="{{ nextcloud_postgres_user }}"
      -e PGDATABASE="{{ nextcloud_postgres_db }}"
      2>&1 > /tmp/nextcloud-postgres-backup-cron
      --
      db /wal-g/full-backup.sh 2>&1 > /tmp/nextcloud-postgres-backup-cron
    state: present
